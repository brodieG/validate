% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all-bw.R
\name{all_bw}
\alias{all_bw}
\title{Verify Values in Vector are Between Two Others}
\usage{
all_bw(x, lo = -Inf, hi = Inf, na.rm = FALSE, bounds = "[]")
}
\arguments{
\item{x}{vector logical (treated as integer), integer, numeric, or character.}

\item{lo}{scalar vector of type coercible to the type of \code{x}, cannot be NA,
use \code{-Inf} to indicate unbounded (default).}

\item{hi}{scalar vector of type coercible to the type of \code{x}, cannot be NA,
use \code{Inf} to indicate unbounded (default), must be greater than or equal to
\code{lo}.}

\item{na.rm}{TRUE or FALSE (default), whether NAs are considered to be in
bounds, NAs are treated as being out of bounds unless you set this
parameter to TRUE, or in the degenerate case where \code{lo} is \code{-Inf}, \code{hi} is
\code{Inf}, and \code{bounds} is \dQuote{[]}.}

\item{bounds}{\code{character(1L)} for values between \code{lo} and \code{hi}:
\itemize{
\item \dQuote{[]} include \code{lo} and \code{hi}
\item \dQuote{()} exclude \code{lo} and \code{hi}
\item \dQuote{[)} include \code{lo}, exclude \code{hi}
\item \dQuote{(]} exclude \code{lo}, include \code{hi}
}

[)} include \code{lo}, exclude \code{hi}
\itemize{
\item \dQuote{(]: R:)%7D%20include%20%60lo%60,%20exclude%20%60hi%60%0A%20%20*%20%5CdQuote%7B(
}}
}
\value{
TRUE if all values in \code{x} conform to the specified bounds, a string
describing the first position that fails otherwise
}
\description{
Equivalent to \code{all(x >= lo & x <= hi)}, but substantially faster for larger
vectors because it does not create \code{length(x)} intermediate logical vectors
and it stops at the first failure.  You can modify the comparison to be
strictly greater/less than via the \code{bounds} parameter.
}
\details{
If \code{x} and \code{lo}/\code{hi} are different types, \code{lo}/\code{hi} will be coerced to the
type of \code{x}.  When \code{lo}/\code{hi} are numeric and \code{x} is integer, if \code{lo}/\code{hi}
values are outside of the integer range then that side will be treated as if
you had used \code{-Inf}/\code{Inf}.  \code{-Inf} and \code{Inf} mean \code{lo} and \code{hi} will be
unbounded for all data types.
}
\examples{
all_bw(runif(100), 0, 1)
all_bw(runif(100) * 2, 0, 1)
all_bw(NA, 0, 1)
all_bw(NA, 0, 1, na.rm=TRUE)

vec <- c(runif(100, 0, 1e12), Inf, 0)
all_bw(vec, 0)      # All +ve numbers
all_bw(vec, hi=0)   # All -ve numbers
all_bw(vec, 0, bounds="(]") # All strictly +ve nums
all_bw(vec, 0, bounds="[)") # All finite +ve nums
}
