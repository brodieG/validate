% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{vetr}
\alias{vetr}
\title{Vet Objects and Function Arguments}
\usage{
vetr(..., .VETR_SETTINGS = NULL)
}
\arguments{
\item{...}{arguments to vetr; they will be matched to the enclosing
function formals as with \code{\link[=match.call]{match.call()}}}

\item{.VETR_SETTINGS}{same as \code{settings}, but for \code{vetr}.  Note that this
means you cannot use \code{vetr} with a function that takes a \code{.VETR_SETTINGS}
argument}
}
\value{
TRUE if validation succeeds, otherwise \code{stop} for
\code{vetr} and varies for \code{vet} according to value chosen with
parameter \code{stop}
}
\description{
Use templates and expressions to vet objects or function arguments.
\code{vet} vets objects, and \code{vetr} vets the formals of the
function that encloses it. \code{tev} is a version of \code{vet} compatible with
\code{magrittr} pipes.
}
\details{
The \code{target} argument for \code{vet}/\code{tev} and the \code{...} arguments for \code{vetr} are
recursively substituted.  If you wish to programmatically specify a vetting
expression you can provide it as quoted language.

\code{tev} just reverses the \code{target} and \code{current} arguments for better
integration with \code{magrittr}.  There are two major caveats:
\itemize{
\item error messages will be less useful since you will get \code{.} instead
of the deparsed call
\item \code{x \\\%>\\\% tev(y)} is much slower than \code{vet(y, x)} (or even \code{tev(x, y)})
}

See \code{vignette('vetr', package='vetr')} and examples for details on how
to use these functions.
}
\seealso{
\code{\link[=alike]{alike()}} for how templates are used,
\code{\link[=vet_token]{vet_token()}} for how to specify custom error messages and also
for predefined validation tokens for common use cases.
}
