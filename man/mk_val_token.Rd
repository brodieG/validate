% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validators.R
\name{mk_val_token}
\alias{mk_val_token}
\title{Make Validator Token}
\usage{
mk_val_token(exp, err.msg = "")
}
\arguments{
\item{exp}{an expression which will be captured but not evaluated}

\item{err.msg}{character(1L) a message that tells the user what the
expected value should be}
}
\value{
a quoted expressions with \code{err.msg} attribute set
}
\description{
Utility function to generate validator tokens with attached error messages.
}
\details{
Allows you to supply error messages for validator to use for each error
token.  Your token should not contain top level \code{&&} or \code{||}.  If
it does your error message will not be reported.  If your token must involve
top level \code{&&} or \code{||}, use \code{identity(x && y)} to ensure that
your error message is used by \code{validate}, but this will only make sense
for a validation expression composed solely of custom tokens.  For example
if you do something like:\preformat{
validate(mk_val_token(identity(logical(1L) && !is.na(.))), NA)
}
the \code{logical(1L)} will be evaluated as \code{FALSE} and cause validation
to always fail instead of being used as a template token.

Error messages should tell you what the acceptable values are so they mesh
with the rest of the error reporting messages.  Typically, we will append
"Should" ahead of your message, such that if you supply "not contain NAs"
it will be displayed as "Should not contain NAs".
}
\examples{
LEN.2 <- mk_val_token(length(.) == 2, "be length two")
SQR <- mk_val_token(nrow(.) == ncol(.), "be square")
SQR.NUM.MX <- quote(matrix(numeric(), 0, 0) && SQR)
## Alternative spec: note the use of `bquote`:
SQR.NUM.MX <- bquote(
  matrix(numeric(), 0, 0) && .(mk_val_token(nrow(.) == ncol(.), "be square"))
)
}
